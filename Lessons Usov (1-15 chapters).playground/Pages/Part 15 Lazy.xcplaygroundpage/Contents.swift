//: [Previous](@previous)

import Foundation

// lazy - в программирование ленивыми называют такие элементы вычисление значений которых откладывается до момента обращения к ним. Таким образом пока значение не потребуется и не будет использовано, оно будет храниться в виде сырых исходных данных. С помощью ленивых вычислений достигается экономия процессорного времени, то есть компьютер не занимается ненужными в данный момент вычислениями

// существует два типа ленивых элементов
// 1 - lazy-by-name - значение элемента вычисляется при каждом обращении к нему
// 2 - lazy-by-need - элемент вычисляется один раз при первом обращении к нему после чего фиксируется и больше не изменяется

// lazy-by-name exaple

var arrayOfNames = ["Loki", "Tor", "Jim"]
print(arrayOfNames.count)
let nextName = { arrayOfNames.remove(at: 0) }
arrayOfNames.count
nextName()
arrayOfNames.count
arrayOfNames

// любая функция или метод являются lazy-by-name так как значение высчитывается при каждом обращении

// свойство lazy

let baseCollection = Array(1...6)
let myLazyCollection = baseCollection.lazy
type(of: myLazyCollection)
let collection = myLazyCollection.map { $0 + 1 }
type(of: collection)

// в результате выполнения возвращается ленивая коллекция. При этом память под отдельный массив целочисленных значений не выделяется, а вычисление метода map(_:) не производится до тех пор пока не произойдет обращение к константе collection

// Вся прелесть такого подхода в том, что вы можете увеличивать цепочки вызовов, но при этом лишнего расхода ресурсов не будет

let resultCollection = [1, 2, 3, 4, 5, 6].lazy.map { $0 + 1 }.filter { $0 % 2 == 0 }
Array(resultCollection)



//: [Next](@next)
