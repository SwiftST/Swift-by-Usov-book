//: [Previous](@previous)

import Foundation

// Контроль доступа
// для контроля доступа используются специальные модификаторы, которые указываются перед объявлением объектного типа, свойства и метода. Всего в Swift доступно пять модификаторов:
/*
 open - открытый
  наименее ограничивающий уровень доступа.Позволяет использовать элемент (объектный тип, свойство или метод) без каких либо ограничений.
 Данный модификатор применяется исключительно к классам и их элементам:
 - класс, имеющий уровень досупа open, может иметь подклассы внутри модуля, где он определен и в модклях куда он импортирован
 - элементы класса, имеющие уровень доступа open, могут быть переопределены в подклассе в том модуле, где он объявлен, а так же в модулях куда он импортирован

 public - публичный
 Подобно open, дынный модификатор позволяет использовать элемент без ограничений. Однако в случае с классами есть некоторые особенности:
 - класс, имеющий уровень доступа public (или более строгий), может иметь подклассы только в том модуле где был объявлен
 - элементы класса имеющие уровень доступа public (или более строгий0), могут быть переопределены (с помощью оператора override) в подклассе только в том модуле где объявлен сам класс
 Для структур данный модификатор является наивысшим, так как структуры не поддерживают наследование, а соответственно и модификатор open
 
 internal - внутренний (по умолчанию)
 Используется в случаях когда нужно ограничить использование объекта модулем. Таким образом объект будет доступен во всех исходных файлах модуля, исключая его использование за пределами модуля.
 
 fileprivate - приватный в пределах файла
 Данный модификатор позволяет использовать объект только в пределах данного исходного файла
 
 private - приватый (частный)
 Позволяет использовать объект только в пределах конструкции, в которой он объявлен. Например, объявленное в классе свойство или метод не будут доступны извне или в его расширениях
 */

// при определении уровня достпа элементов необходимо соблюдать правило:
// В составе объекта с более строгим уровнем доступа не могут находиться элементы с менее строгим уровнем доступа.

open class UserManager {
    public var currentUser: String
    
    private func createUser(withLogin: String) {
        
    }
    private func saveToStorage() {
        
    }
    private func generatePassword() {
        
    }
    init(user: String) {
        currentUser = user
    }
    
}


//: [Next](@next)
